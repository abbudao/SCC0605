options{
LOOKAHEAD = 1;
STATIC = false ;
}


PARSER_BEGIN(Jason)
import java.util.ArrayList;
import java.util.List;
import Simbolo.Simbolo;
    class Jason{
        List<Simbolo> symbol_table = new ArrayList<Simbolo>();
        int nivel_atual = 0;
        int err_count = 0;
        int nparam = 0;
        int arg_count = 0;
        boolean isParam = false;
        public Simbolo findSymbol(String id){
        	for(Simbolo s : symbol_table) {
    	        if(s.id.equals(id)) {
    	            return s;
    	        }
    	    }
    	    return null;
        }
        public void deleteSymbols(int nivel){
        	for(Simbolo s : symbol_table){
        		if(s.nivel == nivel){
        			symbol_table.remove(symbol_table.indexOf(s));
        		}
        	}
        }

        public static void main(String[] args)
            throws ParseException, TokenMgrError{
    	        Jason parser = new Jason(System.in);
    	        parser.Program();
            }

    }
PARSER_END(Jason)

    SKIP: {<"#" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>}
    SKIP: {<"/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/">}
    SKIP: {" " | "\n" | "\r" | "\r\n" | "\t"}
    TOKEN: {<INTEGER: (["0"-"9"])+>}
    TOKEN: {<REALNUM: (["0"-"9"])+|(["0"-"9"])+ ["."] (["0"-"9"])+>}
    TOKEN: {<PROGRAM: "program">}
    TOKEN: {<BEGIN: "begin">}
    TOKEN: {<END: "end">}
    TOKEN: {<READ: "read">}
    TOKEN: {<WRITE: "write">}
    TOKEN: {<IF: "if">}
    TOKEN: {<SET: "set">}
    TOKEN: {<ENDIF: "endif">}
    TOKEN: {<ELSE: "else">}
    TOKEN: {<DO: "do">}
    TOKEN: {<WHILE: "while">}
    TOKEN: {<ENDWHILE: "endwhile">}
    TOKEN: {<UNTIL: "until">}
    TOKEN: {<ENDUNTIL: "enduntil">}
    TOKEN: {<CALL: "call">}
    TOKEN: {<RECORD: "record">}
    TOKEN: {<TYPES: "types">}
    TOKEN: {<VARIABLES: "variables">}
    TOKEN: {<REAL: "real">}
    TOKEN: {<INT: "integer">}
    TOKEN: {<PROC: "procedure">}
    TOKEN: {<PARAM: "parameters">}
    TOKEN: {<VAR: "var">}
    TOKEN: {<FUNCTION: "function">}
    TOKEN: {<RETURNS: "returns">}
    TOKEN: {<RETURN: "return">}
    TOKEN: {<THEN: "then">}
    TOKEN: {<ARRAY: "array">}
    TOKEN: {<EOL: ";">}
    TOKEN: {<IDENTIFIER: (["a"-"z", "A"-"Z", "_"])+ (<REALNUM>)*>}
    TOKEN: {<LBR: "[">}
    TOKEN: {<RBR: "]">}
    TOKEN: {<STRING: "\"" (<IDENTIFIER> | <REALNUM> | " ")+ "\"">}
    TOKEN: {<LP: "(">}
    TOKEN: {<RP: ")">}
    TOKEN: {<SLASH: "\\">}
    TOKEN: {<TIMES: "*">}
    TOKEN: {<DIV: "/">}
    TOKEN: {<PLUS: "+">}
    TOKEN: {<LESS: "-">}
    TOKEN: {<TIL: "~">}
    TOKEN: {<AND: "&">}
    TOKEN: {<EQUAL: "=">}
    TOKEN: {<EXCLAMATION: "!">}
    TOKEN: {<LOE: "<=">}
    TOKEN: {<GOE: ">=">}
    TOKEN: {<LESSTHAN: "<">}
    TOKEN: {<GREATERTHAN: ">">}
    TOKEN: {<ASK: "?">}
    TOKEN: {<POINT: ".">}
    TOKEN: {<COLON: ":">}
    TOKEN: {<COMA: ",">}
    


    /*Programa e Bloco*/
    void Program():
    {Token point;
        symbol_table.add(new Simbolo("integer", 0, "type", null));
        symbol_table.add(new Simbolo("real", 0, "type", null));
        symbol_table.add(new Simbolo("string", 0, "type", null));
        symbol_table.add(new Simbolo("array", 0, "type", null));
        symbol_table.add(new Simbolo("procedure", 0, "proc", null));
        symbol_table.add(new Simbolo("function", 0, "func", null));
    }
    {
    Header() DeclSec() Block()point =<POINT>{System.out.println(point);}
    {
        System.out.println("\nCompilacao finalizada com " + err_count + " erros\n\n\n");
        if(err_count>0){
        throw new ParseException("Compilação finalizada com erros!");
        }
    }
    }

    void Header():
    {Token program, id, eol;}
    {
        program = <PROGRAM> id = <IDENTIFIER> eol = <EOL>
        {System.out.println(program.image);}
        {System.out.println(id);}
        {System.out.println(eol);}
    }
    void Block():
    {Token begin, end;}
    {
        begin = <BEGIN>[Statements()]end = <END>
        {System.out.println(begin);}
        {System.out.println(end);}
    }
    /*Declaracoes*/
    void DeclSec():
    {}
    {
        [TypeDeclSec()][VarDeclSec()][SubProgramDecls()]

    }

    void TypeDeclSec():
    {Token types;}
    {
        types=<TYPES> TypeDecls()
        {System.out.println(types);}
    }

    void TypeDecls():
    {}
    {
        TypeDecl() (TypeDecl())*
    }
    void TypeDecl():
    {Token id;}
    {
        id = <IDENTIFIER> TypeSpecification()
        {
        	if(findSymbol(id.image) != null){
        		System.out.println("\nErro, tipo ja declarado!\n");
        		err_count++;
        	}
        }
    }
    void TypeSpecification():
    {}
    {
        ArraySpecification()
        | RecordSpecification()
    }
    void ArraySpecification():
    {Token array, lbr, num, rbr, eol;}
    {
        array = <ARRAY> DataType() lbr = <LBR> num = <INTEGER> rbr = <RBR> eol = <EOL>
        {System.out.println(array);}
        {System.out.println(lbr);}
        {System.out.println(num);}
        {System.out.println(rbr);}
        {System.out.println(eol);}
    }

    void RecordSpecification():
    {Token record, end, eol;}
    {
        record = <RECORD> VarDecls() end = <END> eol = <EOL>
        {System.out.println(record);}
        {System.out.println(end);}
        {System.out.println(eol);}
    }

    void VarDeclSec():
    {Token variables;}
    {
        variables = <VARIABLES> VarDecls()
        {System.out.println(variables);}
    }

    void VarDecls():
    {}
    {
        VarDecl() ( VarDecl())*
    }

    void VarDecl():
    {Token eol;
    	String type;}
    {
        type = DataType() IdList(type) eol = <EOL>
        {System.out.println(eol);}
    }

    String DataType():
    {Token real = null, integer = null, id = null, string = null;}
    {
        (real = <REAL>{if(real != null)System.out.println(real);
                       if(real != null)
                            return real.image;}
            | integer = <INT>{if(integer != null)System.out.println(integer);
                              if(integer != null)
                                    return integer.image;}
            | id = <IDENTIFIER>{if(id != null)System.out.println(id);
                                if(id != null && findSymbol(id.image) == null){
                                    System.out.println("Erro, tipo nao declarado!");
                                    err_count++;
                                }
                                if(id != null)
                                    return id.image;
                                    }
            | string = <STRING>{if(string != null)System.out.println(string);
                                if(string != null)
                                    return string.image;})
        
    }

    void IdList(String type):
    {Token id = null, coma = null, id2;}
    {   
        (LOOKAHEAD(2) id = <IDENTIFIER>{System.out.println(id);} coma = <COMA>{System.out.println(coma);})*
        id2 = <IDENTIFIER>{System.out.println(id2);}
        {	
        	Simbolo id_symbol = null;
        	if(id != null)
        		 id_symbol = findSymbol(id.image);
        	Simbolo id2_symbol = findSymbol(id2.image);
           	if(id != null && id_symbol != null){
        		System.out.println("\nErro, variavel '" +id.image+ "' ja declarada!\n");
        		err_count++;
           	}
        	else if(id != null){
        		Simbolo aux = findSymbol(type);
        		if(aux != null)//tipo declarado
        			symbol_table.add(new Simbolo(id.image, nivel_atual, "var", aux));
        	}
        	
        	if(id2_symbol != null){
        		System.out.println("\nErro, variavel '" +id2.image+ "' ja declarada!\n");
        		err_count++;
        	}
        	else{
        		Simbolo aux = findSymbol(type);
        		if(aux != null){//tipo declarado
        			symbol_table.add(new Simbolo(id2.image, nivel_atual, "var", aux));
        		}
        	}
        }
    }

    void SubProgramDecls():
    {}
    {
        SubProgramDecl() (SubProgramDecl())*
    }
    void SubProgramDecl():
    {}
    {
        ProcDecl() | FunctionDecl()
    }
    void ProcDecl():
    {Token eol; String proc_name;nivel_atual++;}
    {
        proc_name = ProcHeader() SubProgramDeclSec(proc_name) Block() eol = <EOL>
        {System.out.println(eol);}
       {	

        	findSymbol(proc_name).nparam = nparam;
        	nparam = 0;
        	nivel_atual--;

        }
    }

    String ProcHeader():
    {Token proc, id, eol;}
    {
        proc = <PROC> id = <IDENTIFIER> eol = <EOL>
        {System.out.println(proc);}
        {System.out.println(id);}
        {System.out.println(eol);}
        {
        	if(findSymbol(id.image) != null){
        		System.out.println("\nErro, procedure '" +id.image+ "'' ja declarado!\n");
                err_count++;
            }

        	symbol_table.add(new Simbolo(id.image, nivel_atual-1, "proc", findSymbol("procedure")));
        	return id.image;
        }
    }
    void SubProgramDeclSec(String id):
    {}
    {
        [ParamDeclSec(id)] DeclSec()
    }
    void ParamDeclSec(String id):
    {Token param;}
    {
        param = <PARAM> ParamDecls(id)
        {System.out.println(param);}        
    }

    void ParamDecls(String id):
    {}
    {
        (ParamDecl(id))+
    }

    void ParamDecl(String name):
    {Token var = null, id, eol; String tipo;}
    {
        [var = <VAR>] tipo = DataType() id = <IDENTIFIER> eol = <EOL>
        {if(var != null)System.out.println(var);}
        {System.out.println(id);}
        {System.out.println(eol);}
        {nparam++;}
        {
        	Simbolo s = findSymbol(name);
        	if(var != null)
        		s.arguments.add(new Simbolo(id.image, nivel_atual, "var", findSymbol(tipo)));
        	else
        		s.arguments.add(new Simbolo(id.image, nivel_atual, "param", findSymbol(tipo)));
        }
    }

    void FunctionDecl():
    {Token eol;String function_name;nivel_atual++;}
    {
        function_name = FunctionHeader() SubProgramDeclSec(function_name) FunctionBlock() eol = <EOL>
        {
        	findSymbol(function_name).nparam = nparam;
        	nparam = 0;
        	nivel_atual--;

        }
    }

    String FunctionHeader():
    {Token function, id, ret, eol;
     String tipo;}
    {
        function = <FUNCTION> id = <IDENTIFIER> ret = <RETURNS> tipo = DataType() eol = <EOL>
        {System.out.println(function);}
        {System.out.println(id);}
        {System.out.println(ret);}
        {System.out.println(eol);}
        {
        	if(findSymbol(id.image) != null){
        		err_count++;
        		System.out.println("\nErro, funcao '" +id.image+ "'' ja declarada!\n");
        	}
        	Simbolo aux = findSymbol(tipo);
        	if(aux == null){
        		err_count++;
        		System.out.println("\nErro, tipo '" +tipo+ "' nao declarado\n");
        		symbol_table.add(new Simbolo(id.image, nivel_atual-1, "func", findSymbol("function")));
        	}
        	else
	        	symbol_table.add(new Simbolo(id.image, nivel_atual-1, "func", findSymbol(tipo)));
        	return id.image;
        }
    }

    void FunctionBlock():
    {Token begin, end;}
    {
        begin = <BEGIN>{System.out.println(begin);} 
        [Statements()] ReturnStatement() end = <END>{System.out.println(end);}
    }
    /* Comandos */
    void Statements():
    {Token eol = null;}
    {   
        Statement() ( LOOKAHEAD(2)eol = <EOL> {System.out.println(eol);}Statement())*
    }

    void Statement():
    {Token read = null, write = null, set = null,
            equal = null, i = null, then = null,
            w = null, d1 = null, endwhile = null,
            until = null, d2 = null, enduntil = null,
            call = null, id = null;
    String tipo1 = null, tipo2 = null;
	}
    {
        (read = <READ> {System.out.println(read);}| write = <WRITE> {System.out.println(write);}) tipo1 = Variable()
        | set = <SET>  tipo1 = Variable() equal = <EQUAL>  tipo2 = Expression(){System.out.println(set);}{System.out.println(equal);}
            {
                if(set != null){
                    if(!tipo1.equals(tipo2)){
                        err_count++;
                        System.out.println("\nErro, tipos incompativeis!\n");
                    } if (tipo1.equals("invalid")){
                        err_count++;
                        System.out.println("\nErro, tipos incompativeis!\n");
                    }
                }
            }
        | i = <IF> {System.out.println(i);} tipo1 = Condition_Exp() then = <THEN> {System.out.println(then);} Statements() ElseClause()
        | w = <WHILE> Condition_Exp() {System.out.println(w);} d1 = <DO> {System.out.println(d1);} [Statements()] endwhile = <ENDWHILE> {System.out.println(endwhile);}
        | until = <UNTIL> Condition_Exp(){System.out.println(until);} d2 = <DO> {System.out.println(d2);} [Statements()] enduntil = <ENDUNTIL> {System.out.println(enduntil);}
        | call = <CALL> id = <IDENTIFIER>[ArgList(id.image)] {System.out.println(call);} {System.out.println(id);} 
        | tipo1 = Condition_Exp()
    }
    String Condition_Exp():
    {Token ask = null, colon = null;
     String tipo1 = null, tipo2 = null, tipo3;}
    {
        tipo3 = Condition()[ask = <ASK> tipo1 = Condition_Exp() colon = <COLON> tipo2 = Condition_Exp()]
        {if(ask != null)System.out.println(ask);}
        {if(colon != null)System.out.println(colon);}
        {arg_count++;}
        {
        	if(tipo1 != null && !tipo1.equals("integer")){
        		err_count++;
        		System.out.println("Erro, condicao invalida!");
        	}

        	if(tipo2 != null && !tipo2.equals("integer")){
        		err_count++;
        		System.out.println("Erro, condicao invalida!");
        	}
        	if(!tipo3.equals("integer")){
        		err_count++;
        		System.out.println("Erro, condicao invalida!");
        	}
        	return "integer";

        }
    }
    void ElseClause():
    {Token el = null, endif;}
    {
        [el = <ELSE> Statements()] endif = <ENDIF>
        {if(el != null)System.out.println(el);}
        {System.out.println(endif);} 
    }
    void ReturnStatement():
    {Token eol, ret, lp, rp;}
    {
        eol = <EOL> ret = <RETURN> lp = <LP> Condition_Exp() rp = <RP>
        {System.out.println(eol);}
        {System.out.println(ret);}
        {System.out.println(lp);}
        {System.out.println(rp);}
    }

    void ArgList(String id):
    {Token lp, rp; arg_count = 0; isParam = true;}
    {
        lp = <LP> [Arguments()] rp = <RP>
        {System.out.println(lp);}
        {System.out.println(rp);}
        {
        	Simbolo s = findSymbol(id);
            if(s == null){
                err_count++;
                System.out.println("Erro, funcao ou procedure nao declarado!");
            }
        	else if(s.nparam != arg_count){
        		err_count++;
        		System.out.println("Erro, numero de parâmetros incorreto!");
        	}
        	arg_count = 0;
        	isParam = false;
        }
    }

    void Arguments():
    {Token coma = null;}
    {
        (LOOKAHEAD(2) Condition_Exp() coma = <COMA> )* Condition_Exp()
        {if(coma != null)System.out.println(coma);}
    }
    String Condition():
    {Token slash = null;
     String tipo_resultante, tipo1, tipo2 = null;}
    {
        tipo1 = CompoundCondition() (slash = <SLASH> tipo2 = CompoundCondition())*
        {if(slash != null)System.out.println(slash);}
        {
        	if(tipo2 == null || tipo2.equals("invalid")){
        		tipo_resultante = tipo1;
        	}else{
        		if(tipo1.equals("invalid")){
        			tipo_resultante = tipo2;
        		}else if(tipo1.equals(tipo2)){
        			tipo_resultante = "integer";
        		}else{
        			err_count++;
        			System.out.println("\nErro, tipos incompativeis!\n");
        			tipo_resultante = "invalid";
        		}
        	}
        	return tipo_resultante;
        }
    }

    String CompoundCondition():
    {Token and = null;
     String tipo_resultante, tipo1, tipo2 = null;}
    {
        tipo1 = SimpleCondition() (and = <AND> tipo2 = SimpleCondition())*
        {if(and != null)System.out.println(and);}
        {
        	if(tipo2 == null || (tipo2 != null && tipo2.equals("invalid")) ){
        		tipo_resultante = tipo1;
        	}else{
        		if(tipo1.equals("invalid")){
        			tipo_resultante = tipo2;
        		}else if(tipo1.equals(tipo2)){
        			tipo_resultante = "integer";
        		}else{
        			err_count++;
        			System.out.println("\nErro, tipos incompativeis!\n");
        			tipo_resultante = "invalid";
        		}
        	}
        	return tipo_resultante;
        }
    }
    String SimpleCondition():
    {String tipo_resultante, tipo1, tipo2 = null;}
    {
       tipo1 = Expression() (RelOp() tipo2 = Expression())*
        {
        	if(tipo2 == null || (tipo2 != null && tipo2.equals("invalid"))){
        		tipo_resultante = tipo1;
        	}else{
        		if(tipo1.equals("invalid")){
        			tipo_resultante = tipo2;
        		}else if(tipo1.equals(tipo2)){
        			tipo_resultante = "integer";
        		}else{
        			err_count++;
        			System.out.println("\nErro, tipos incompativeis!\n");
        			tipo_resultante = "invalid";
        		}
        	}
        	return tipo_resultante;
        }
    }
    String Expression():
    {String tipo_resultante, tipo1, tipo2 = null;}
    {
        tipo1 = Term() (AddOp() tipo2 = Term())*
        {
        	if(tipo2 == null || tipo2.equals("invalid")){
        		tipo_resultante = tipo1;
        	}else{
        		if(tipo1.equals("invalid")){
        			tipo_resultante = tipo2;
        		}else if(tipo1.equals(tipo2)){
        			tipo_resultante = tipo1;
        		}else if(tipo1.equals("integer") && tipo2.equals("real")){
        			tipo_resultante = "real";
        		}else if(tipo1.equals("real") && tipo2.equals("integer")){
        			tipo_resultante = "real";
        		}else{
        			err_count++;
        			System.out.println("\nErro, tipos incompativeis!\n");
        			tipo_resultante = "invalid";
        		}
        	}
        	return tipo_resultante;
        }
    }
    String Term():
    {String tipo_resultante, tipo1, tipo2 = null;}
    {
        tipo1 = Unary() (MultOp() tipo2 = Unary())*

        {
        	if(tipo2 == null || tipo2.equals("invalid")){
        		tipo_resultante = tipo1;
        	}else{
        		if(tipo1.equals("invalid")){
        			tipo_resultante = tipo2;
        		}else if(tipo1.equals(tipo2)){
        			tipo_resultante = tipo1;
        		}else if(tipo1.equals("integer") && tipo2.equals("real")){
        			tipo_resultante = "real";
        		}else if(tipo1.equals("real") && tipo2.equals("integer")){
        			tipo_resultante = "real";
        		}else{
        			err_count++;
        			System.out.println("\nErro, tipos incompativeis!\n");
        			tipo_resultante = "invalid";
        		}
        	}
        	return tipo_resultante;
        }
    }

    /*Expressoes*/
    String Unary():
    {Token plus = null, less = null;
     String tipo = "invalid";}
    {
        (plus = <PLUS> {System.out.println(plus);}| less = <LESS> {System.out.println(less);})
        tipo = Unary()
        | tipo = Factor()
        
        {
            return tipo;
        }
    }
    String Factor():
    {Token til = null, num = null, integer = null, str = null,
            lp = null, rp = null, id = null;
     String tipo = "invalid";}
    {
        [til = <TIL> {System.out.println(til);}] (LOOKAHEAD(2)
        tipo = Variable(){return tipo;}
        | num = <REALNUM> {System.out.println(num); return "real";}
        | integer = <INTEGER> {System.out.println(integer); return "integer";}
        | str = <STRING> {System.out.println(str); return "string";}
        | lp = <LP> {System.out.println(lp);} Condition_Exp() rp = <RP> {System.out.println(rp);}
        | id = <IDENTIFIER> {System.out.println(id);return findSymbol(id.image).tipo.id;} ArgList(id.image) )


    }
    String Variable():
    {Token id, lbr = null, rbr = null, point = null,
            id2 = null, lbr2 = null, rbr2 = null;}
    {
        id = <IDENTIFIER> {System.out.println(id);} [lbr = <LBR> {System.out.println(lbr);} Expression()
        rbr = <RBR> {System.out.println(rbr);}]
            (point = <POINT> {System.out.println(point);}
 id2 = <IDENTIFIER> {System.out.println(id2);} [lbr2 = <LBR>Expression() rbr2 = <RBR> {System.out.println(rbr2);}])*
		{
        	 Simbolo aux = findSymbol(id.image);
        	 if(aux != null){
        	 	return aux.tipo.id;
        	 }else{
                err_count++;
                throw new ParseException("Erro, variavel nao declarada!");
        	 	System.out.println("Erro, variavel não declarada!");
        	 	return "invalid";
        	 }

        }
    }
    void RelOp():
    {Token equal = null, ex= null, gr= null,
            ls = null, loe = null, goe = null;}
    {
        (equal = <EQUAL>){System.out.println(equal);}
        | (ex = <EXCLAMATION>){System.out.println(ex);}
        | (gr = <GREATERTHAN>){System.out.println(gr);}
        | (ls = <LESSTHAN>){System.out.println(ls);}
        | (loe = <LOE>){System.out.println(loe);}
        | (goe = <GOE>){System.out.println(goe);}
    }
    void AddOp():
    {Token plus = null, less = null;}
    {
        plus = <PLUS>{System.out.println(plus);}
        | less = <LESS>{System.out.println(less);}

        
        
    }
    void MultOp():
    {Token times = null, div = null;}
    {
        times = <TIMES>{System.out.println(times);}
        | div = <DIV>{System.out.println(div);}
    }
